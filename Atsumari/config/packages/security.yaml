security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    hide_user_not_found: false
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api/
            stateless: true
            provider: app_user_provider
            jwt: ~
        main:
            json_login:
                check_path: /login # The name in routes.yaml is enough for mapping
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            logout:
                path: logout
#        main:
#            lazy: true
#            provider: app_user_provider
#            json_login:
#                check_path: app_login
#                username_path: email
#                password_path: password
#            logout:
#                path: logout
#        login:
#            pattern: ^/api/login
#            stateless: true
#            json_login:
#                check_path: /api/login_check
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure
#        api:
#            pattern: ^/api
#            stateless: true
#            jwt: ~
#        main:
#            lazy: true
#            provider: app_user_provider
##            form_login:
##                login_path: app_login
##                check_path: app_login
##                username_parameter: email
##                password_parameter: password
##                enable_csrf: true
##                default_target_path: dashboard
#            logout: true
#            remember_me:
#                secret: '%kernel.secret%'
#                signature_properties: [password]
#        api:
##            pattern:   ^/api
#            json_login:
#                check_path: app_login
#                username_path: email
#                password_path: password

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/settings_admin, roles: ROLE_ADMIN }
         - { path: ^/api/login, roles: PUBLIC_ACCESS }
         - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
